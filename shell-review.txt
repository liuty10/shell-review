This file is for shell script review
-----------------------------------------------
1. 
$#: the NUMBER of arguments to shell, do not include the command itself.
$*: all arguments. There should be spaces between any two arguments. Do not include the command itself.
$0: the command itself.
$1: the first argument
$2: the second argument
See Example3.
$@ = stores all the arguments in a list of string. do not include the command itself.
$* = stores all the arguments as a single string. do not include the command itself.
$# = stores the number of arguments. do not include the command itself, start from 1.


2. 
key word "local" can define a local variable.
If you WRITE a variable, do not use $.
If you READ  a variable, do     use $.

See Example4 and Example4.1.

3. There are no spaces beside "=" for assigning values.
There is no ";" at end of each shell statements.

4. if statement
-------------------------------------------------
if [ expression ]
then
  #code block
fi

if [ expression ]
then
  #code block
else if [ expression ]
     then
         #code block
     else
         #code block
     fi
fi

case "$var" in
  condition1)
     ;;
  condition2)
     ;;
  *)
      default statements;;
 esac

----------------------------------------------------
-eq  =
-ne  !=
-gt   >
-lt   <
-ge   >=
-le   <=
-z    is empty
-n    is not empty
-e    file exits or not
-f    is it a normal file(not directory)
-s    size of file is not 0
-d    file is a directory
-r    file is readable to current user
-w    file is writable to current user
-x    file is executable for current user
-o    logic or

-----------------------------------------------------
&&    If the condition is True, then execute the next command.
||    If the condition is False, then execute the next command.
-----------------------------------------------------
Example5:
compare integer A and integer B: if [ $a = $b ] or if [ $a -eq $b ]
compare string A and Sting B: if [ $a = $b ]
check if String A is empty: if [ -z $a ]
attention: There should be spaces beside "[", "]" and "=".

#!/bin/bash
folder=/home
[ -r "$folder" ] && echo "Can read $folder"
[ -f "$folder" ] || echo "This is not file"
---------------------------------------------------------
#!/bin/bash
echo "Hit a key, then hit return."
read Keypress                            #block there until you input a character from keyboard.
case "$Keypress" in
    [A-Z]) echo "Uppercase letter";;
    [a-z]) echo "Lowercase letter";;
    [0-9]) echo "Digit";;
    *)     echo "Punctuation, whitespace, or other";;
esac
------------------------------------------------------------
5. Loops

for var in [list]
do
    #code block
done

while [ condition ]
do
    #code block (If condition is True, then execute this expression.)
done

until [ condition ]
do
    #code block(If condition is False, then execute this expression.)
done

----------------------------------------
#!/bin/bash
for day in Sun Mon Tue Wed Thu Fri Sat
do
    echo $day
done
However, if the list is in "", the list will be considered as one argument.
for day in "Sun Mon Tue Wed Thu Fri Sat"
do
    echo $day
done
----------------------------------------
6. Other usages:
: empty statements. Do nothing.
eg:
if [ -r $file ]
then
    :
else
    mkdir xxx
fi
-------------------------
! logic not
eg:
! echo "No such file" || ! echo "Nothing to do"
-------------------------

echo -n "Are you sure to delete qcd(y/Y or q/Q)?"
while read choice
do
   if[ "$choice" = "Y" -o "$choice" = "y" ]
   then
       break
   fi
   if[ "$choice" = "q" -o "$choice" = "Q" ]
   then
       echo "nothing to do"
       exit 1
   fi
done

PATH=/home/xxx
export PATH
unset PATH

wc : print the byets, line of a file
eg:
wc -c xxx.file : size of a xxx.file in bytes
wc -l xxx.file: number of rows in xxx.file
wc -m xxx.file: number of character in xxx.file
wc -w xxx.file: number of words in xxx.file
wc -L xxx.file: print out the length of the longest row.







Example2: s2.sh
#!/bin/bash
num=2
echo "this is $num ed"

Example3: s3.sh
#!/bin/bash
echo "number of vars: " $#
echo "values of vars: " $*
echo "value of var1: " $1

./s3.sh 1 2 3

Output:
3
./s3.sh 1 2 3
1

Example4: s4.sh
#!/bin/bash
hello="var1"
echo $hello
function func1{
    local hello="var2"
    echo $hello
}
func1
echo $hello

Output:
var1
var2
var1

Example4.1: s4_1.sh
#!/bin/bash
hello="var1"
echo $hello
function func1{
    hello="var2"
    echo $hello
}
func1
echo $hello

Output:
var1
var2
var2
